#!/bin/bash
export REPO_DIR="@@REPO_DIR@@"

ts=$(date +%s)
tdir=/tmp/xqanalyze/$ts

main() {
  echo "Running xqanalyze"

  case $1 in
  --extract-functions | -x)
    option=extract_functions
    if [ ! -f $2 ]; then
      echo "File $2 does not exist"
      exit 1
    fi
    file=$2
    ;;

  --extract-all-functions | -a)
    option=extract_all_functions
    ;;

  --import-checks | "*")
    option="import_checks"
    ;;

  esac
  echo "Option: $option"

  # Run the function matching the selected option
  $option $file
}

extract_all_functions() {
  echo "Extracting all functions"
  gen_file_list
  for f in $(cat $tdir/xqyfiles.txt); do
    echo "Processing file: $f"
    node $REPO_DIR/src/extract-functions.js \
      --file-name=$f \
      --out-dir=$tdir
    echo "check result .."
    read x
  done
}

extract_functions() {
  echo "Extracting functions"
  local file=$1
  node $REPO_DIR/src/extract-functions.js --file-name=$file
}

import_checks() {
  gen_file_list
  check_for_import_names
  generate_import_db
  ingest_csv_to_sqlite $tdir/out.csv $tdir/xqy.sqlite xqy_imports
  ingest_csv_to_sqlite $tdir/namespaces.csv $tdir/xqy.sqlite xqy_namespaces <<EOF
CREATE TABLE IF NOT EXISTS xqy_namespaces (
  file TEXT,
  prefix TEXT,
  uri TEXT,
  filePath TEXT
);
EOF

  ingest_csv_to_sqlite $tdir/functions.csv $tdir/xqy.sqlite xqy_functions <<EOF
CREATE TABLE IF NOT EXISTS xqy_functions (
  file TEXT,
  name TEXT,
  line INTEGER,
  signature TEXT
);
EOF

  ingest_csv_to_sqlite $tdir/invocations.csv $tdir/xqy.sqlite xqy_invocations <<EOF
CREATE TABLE IF NOT EXISTS xqy_invocations (
  file TEXT,
  caller TEXT,
  invoked_module TEXT,
  invoked_function TEXT
);
EOF

  ingest_csv_to_sqlite $tdir/parameters.csv $tdir/xqy.sqlite xqy_parameters <<EOF
CREATE TABLE IF NOT EXISTS xqy_parameters (
  file TEXT,
  function_name TEXT,
  parameter TEXT,
  type TEXT
);
EOF
  hh "Found $(wc -l $tdir/xqyfiles.txt) xquery files"
}

gen_file_list() {
  if [ -d "$tdir" ]; then rm -rf $tdir;fi
  echo "Making temp dir $tdir"
  mkdir -p $tdir
  git ls-files | grep "\.xqy$" >$tdir/xqyfiles.txt
}
extract_functions() {
  local file=$1
  node $REPO_DIR/src/extract-functions.js --file-name=$file
}

# Function to ingest CSV into SQLite
ingest_csv_to_sqlite() {
  hh "Ingesting CSV into SQLite"
  local csv_file=$1
  local db_file=$2
  local table_name=$3

  # Check if the CSV file exists
  if [[ ! -f "$csv_file" ]]; then
    echo "CSV file '$csv_file' does not exist."
    return 1
  fi

  # Check if the database file exists, if not, create it
  if [[ ! -f "$db_file" ]]; then
    echo "Database file '$db_file' does not exist, creating new database..."
    sqlite3 "$db_file" "VACUUM;"
  fi

  # Create the table structure based on CSV columns (assuming header row)
  sqlite3 "$db_file" <<EOF
CREATE TABLE IF NOT EXISTS $table_name (
    abbrev TEXT,
    namespace TEXT,
    path TEXT,
    client TEXT,
    local TEXT
);
EOF

  # Import the CSV data into the table (ignoring the first row - the header)
  sqlite3 -separator ',' "$db_file" ".import '$csv_file' $table_name"

  echo "Data successfully ingested into '$db_file' table '$table_name'."
  echo "Open with sqlitestudio? (y/n)"
  read x
  if [ "$x" == "y" ]; then
    sqlitestudio $db_file
  fi
}

generate_import_db() {
  hh "Generating import database"
  local index=0
  local with_header="--with-header=true"
  for f in $(cat $tdir/xqyfiles.txt); do
    node $REPO_DIR/src/import-rows.js \
      --file-name=$f \
      --input-list=$tdir/xqyfiles.txt \
      $with_header \
      >>$tdir/out.csv
    with_header=""
  done
  echo "preview of output"
  head -n 3 $tdir/out.csv
  hh "Total imports: $(wc -l $tdir/out.csv)"
}

check_for_import_names() {
  getmods() {
    for f in $(cat $tdir/xqyfiles.txt); do
      cat $f | grep "^module namespace" | awk '{print $3}' | awk -F= '{print $1}'
    done
  }
  hh "Found the following module namespaces:"
  getmods | sort | uniq -c | while read count name; do
    echo "  $name ($count instances)"
  done
}
# Create a function to print a message in red with a timestamp prepended
hh() {
  echo -e "\033[31m$(date +%H:%M:%S) $1\033[0m"
}

main $@
